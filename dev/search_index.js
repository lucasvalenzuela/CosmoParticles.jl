var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CosmoParticles","category":"page"},{"location":"#CosmoParticles","page":"Home","title":"CosmoParticles","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CosmoParticles.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CosmoParticles]","category":"page"},{"location":"#CosmoParticles.AbstractParticles","page":"Home","title":"CosmoParticles.AbstractParticles","text":"AbstractParticles\n\nAbstract supertype for storing particle data efficiently in arrays.\n\nParticles generally have IDs, positions, and velocities as properties. The properties are expected to be stored in a Dict{Symbol,Any} as vectors of length N, matrices of size mN, or as scalars (when the property is equal for all particles).\n\nThe inbuilt functionality of AbstractParticles includes accessing and setting properties via the following syntax:\n\np.id = [1, 2, 3]\np[:id] === p.id\n\nIf the struct has additional fields, these can also be accessed by p.field, but not by p[:field]. The latter syntax can only be used to access the particle properties.\n\nProperty keys\n\n:id: Vector of IDs\n:pos: 2N or 3N Matrix with positions\n:vel: 2N or 3N Matrix with velocities\n\nMethods\n\nThe methods Base.keys, Base.values, and Base.haskey are forwarded to the property Dict.\n\nConcrete types of AbstractParticles should have the following methods implemented (also see the implementation of Particles):\n\nBase.copy: returns new object containing a copy of the Dict\nBase.:(==)\nCosmoParticles.particle_name: returns the name of the struct to be printed via Base.show\nBase.propertynames: implement this if there are additional struct fields\nBase.show(io, mime, p)\n\n\n\n\n\n","category":"type"},{"location":"#CosmoParticles.Particles","page":"Home","title":"CosmoParticles.Particles","text":"struct Particles <: AbstractParticles\n    type::Symbol\n    props::Dict{Symbol,Any}\nend\n\nParticles of a certain type (typically something like :dm or :gas in the cosmological context) with their properties.\n\n\n\n\n\n","category":"type"},{"location":"#CosmoParticles.Particles-Tuple{Any}","page":"Home","title":"CosmoParticles.Particles","text":"Particles(type[, pairs::Pair...])\n\nCreate a Particles object with the given type and pairs of Symbol to the property values. These are passed to the underlying Dict. If no pairs are passed to the method, an empty Dict is created.\n\n\n\n\n\n","category":"method"},{"location":"#CosmoParticles.get_props-Tuple{AbstractParticles}","page":"Home","title":"CosmoParticles.get_props","text":"CosmoParticles.get_props(p::AbstractParticles)\n\nReturn the property Dict belonging to the particles.\n\nThis returns p.props by default if not overridden.\n\n\n\n\n\n","category":"method"},{"location":"#CosmoParticles.particle_name-Tuple{AbstractParticles}","page":"Home","title":"CosmoParticles.particle_name","text":"CosmoParticles.particle_name(::AbstractParticles)\n\nReturns the name of the particle type, which is used when printing an object of this type via Base.show.\n\n\n\n\n\n","category":"method"},{"location":"#CosmoParticles.particle_number-Tuple{AbstractParticles}","page":"Home","title":"CosmoParticles.particle_number","text":"CosmoParticles.particle_number(p::AbstractParticles)\n\nReturns the number of particles by determining the length of one of the property arrays.\n\n\n\n\n\n","category":"method"},{"location":"#CosmoParticles.show_properties-Tuple{IO, AbstractString, AbstractParticles}","page":"Home","title":"CosmoParticles.show_properties","text":"CosmoParticles.show_properties(io::IO, mime, p::AbstractParticles)\n\nPrints the number of particles, the name of the type, and the property names.\n\nShould be used internally when overriding Base.show for concrete implementations of AbstractParticles.\n\n\n\n\n\n","category":"method"}]
}
